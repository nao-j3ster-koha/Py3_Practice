「Pythonでの正規表現」
[re]モジュールオンラインドキュメント
https://docs.python.org/ja/3/library/re.html

①：正規表現で文字列を検索する
<実行例>
import re

re.search(r'abc', 'def')            #これは失敗する

re.search(r'abc', 'abc')     #これは成功する
<実行結果>
<_sre.SRE_Match object; span=(0, 3), match='abc'>
⇒戻り値は「Matchオブジェクト」に返る



②：正規表現の検索結果をオブジェクトに格納する
<実行例>
s =  'defghjiaaaaaaaaaaaaaaaaaaaaaaaaaaabc'         #検索対象文字列オブジェクト
m = re.search(r'a+bc', s)                           #検索結果オブジェクト

m                                                                               #格納したオブジェクトの参照
<_sre.SRE_Match object; span=(7, 36), match='aaaaaaaaaaaaaaaaaaaaaaaaaaabc'>    #オブジェクトの中身

    【格納したオブジェクトの参照】
    ②-1：検索で得られた文字列を表示させる
    <実行例>
    m.string                                        #検索結果オブジェクトmに含まれる「string」属性を参照
    ⇒'defghjiaaaaaaaaaaaaaaaaaaaaaaaaaaabc'

    ②-2：検索条件に使用した文字列を表示させる
    m.re                                            #検索結果オブジェクト「m」に含まれる「re」オブジェクトを参照
    ⇒re.compile('a+bc')
    ※ビルトインオブジェクトクラス「SRE_Pattern」によってコンパイルされた正規表現オブジェクト※

    ②-3：検索された文字列について、検索対象文字列内の開始位置と終了位置の情報を表示する
    m.regs
    ⇒((7, 36),)
    ※tupleクラスで生成された、タプルオブジェクト

    m.span()
    ⇒(7, 36)
    ※_sre.SRE_Matchインスタンスのメソッド
    　MatchObjectに対して、2値のタプル(m.start(group), m.end(group))を返す

    ②-4：検索された文字列について、検索対象文字列内の開始位置の値を表示させる
    m.start()
    ⇒7
    ※MatchObjectに含まれる、Intオブジェクト

    ②-5：検索された文字列について、検索対象文字列内の終了位置の値を表示させる
    m.end()
    ⇒36
    ※MatchObjectに含まれる、Intオブジェクト

    m.endpos
    ⇒36
    ※MatchObjectに含まれる、Intオブジェクト


③：電話番号などの数字の文字列を検索する。

    ③-1：検索のモジュールを使用する
    <実行例>
    re.search(r'0\d{1,4}-\d{1,4}-\d{4}', '06-6012-3456')
    <_sre.SRE_Match object; span=(0, 12), match='06-6012-3456'

    ③-2：検索の結果をオブジェクトに格納する
    <実行例>
    m = re.search(r'0\d{1,4}-\d{1,4}-\d{4}', '06-6012-3456')
    m.groups()
    ⇒()
    ※検索条件を（と）で囲んだ単位で、検索結果がグループ別に格納される

    ③-3：検索結果をグループ別に格納する
    ⇒06-6012-3456を「06」、「6012」、「3456」のグループ別に格納する。
    <実行例>
    m = re.search(r'0(\d{1,4})-(\d{1,4})-(\d{4})', '06-6012-3456')

        「格納グループ全体の参照」
        m.groups()
        ⇒('6', '6012', '3456')
        ※(\d{1,4})、(\d{1,4})、(\d{4})の単位で検索条件を設定

        「各検索結果グループ毎の参照」※添え字は1から開始※
        m.group(1)              #検索結果グループ1番目
        ⇒'6'

        m.group(2)              #検索結果グループ2番目
        ⇒'6012'

        m.group(3)              #検索結果グループ3番目
        ⇒'3456'

    ③-4：検索結果のグループに名前を付ける
    ⇒「06」、「6012」、「3456」のグループを「area」、「local」、「subscriber」として名前を付ける
    <実行例>
    m = re.search(r'0(?P<area>\d{1,4})-(?P<local>\d{1,4})-(?P<subscriber>\d{4})', '06-6012-3456')

        「格納グループ全体の参照」
        m.gourpdict()
        ⇒{'area': '6', 'local': '6012', 'subscriber': '3456'}
        ※各グループ単位の辞書データとして格納される。

        「各検索結果グループ毎の参照」※添え字は1から開始※





















【戻り値オブジェクトを参照して得られる情報】

